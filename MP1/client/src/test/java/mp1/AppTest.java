/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mp1;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.net.InetSocketAddress;
import java.util.ArrayList;
import java.util.List;

// Refer to docs/testcase_map.md for a better understanding of the test cases
class AppTest {
    private static int numServers = 5;
    private static int port = 7777;
    private List<InetSocketAddress> hosts = new ArrayList<>();

    private static int rareAnsPerFile = 5;
    private static int midAnsPerFile = 295;
    private static int freqAnsPerFile = 700;
    private static int numOne = 1;
    private static int numSome = 3;
    private static int numAll = numServers;

    public AppTest() {
        // Servers are 02 ~ numServers + 1
        for(int i = 2 ; i <= numServers + 1 ; i ++)
        {
            String hostName = String.format("fa22-cs425-50%02d.cs.illinois.edu", i);
            hosts.add(new InetSocketAddress(hostName, port));
        }
        System.out.printf("hosts: %s\n", hosts.toString());
    }

    @Test
    public void rareToOne() {
        Client client = new Client(hosts);
        String query = "grep -rc \"rare1\" ~/testcases/*.log";
        List<String> results = client.doQuery(query); 
        int lineCount = 0;
        for(String result: results)
            lineCount += Integer.parseInt(result.replaceAll("[\n\r]", ""));
        assertEquals(rareAnsPerFile * numOne, lineCount);
    }
    @Test
    public void rareToSome() {
        Client client = new Client(hosts);
        String query = "grep -rc \"rare2\" ~/testcases/*.log";
        List<String> results = client.doQuery(query); 
        int lineCount = 0;
        for(String result: results)
            lineCount += Integer.parseInt(result.replaceAll("[\n\r]", ""));
        assertEquals(rareAnsPerFile * numSome, lineCount);
    }
    @Test
    public void rareToAll() {
        Client client = new Client(hosts);
        String query = "grep -rc \"rare\" ~/testcases/*.log";
        List<String> results = client.doQuery(query); 
        int lineCount = 0;
        for(String result: results)
            lineCount += Integer.parseInt(result.replaceAll("[\n\r]", ""));
        assertEquals(rareAnsPerFile * numAll, lineCount);
    }
    @Test
    public void midToOne() {
        Client client = new Client(hosts);
        String query = "grep -rc \"mid1\" ~/testcases/*.log";
        List<String> results = client.doQuery(query); 
        int lineCount = 0;
        for(String result: results)
            lineCount += Integer.parseInt(result.replaceAll("[\n\r]", ""));
       assertEquals(midAnsPerFile * numOne, lineCount);
    }
    @Test
    public void midToSome() {
        Client client = new Client(hosts);
        String query = "grep -rc \"mid2\" ~/testcases/*.log";
        List<String> results = client.doQuery(query); 
        int lineCount = 0;
        for(String result: results)
            lineCount += Integer.parseInt(result.replaceAll("[\n\r]", ""));
      assertEquals(midAnsPerFile * numSome, lineCount);
    }
    @Test
    public void midToAll() {
        Client client = new Client(hosts);
        String query = "grep -rc \"mid\" ~/testcases/*.log";
        List<String> results = client.doQuery(query); 
        int lineCount = 0;
        for(String result: results)
            lineCount += Integer.parseInt(result.replaceAll("[\n\r]", ""));
        assertEquals(midAnsPerFile * numAll, lineCount);
    }

   @Test
    public void freqToOne() {
        Client client = new Client(hosts);
        String query = "grep -rc \"freq1\" ~/testcases/*.log";
        List<String> results = client.doQuery(query); 
        int lineCount = 0;
        for(String result: results)
            lineCount += Integer.parseInt(result.replaceAll("[\n\r]", ""));
         assertEquals(freqAnsPerFile * numOne, lineCount);
    }

   @Test
    public void freqToSome() {
        Client client = new Client(hosts);
        String query = "grep -rc \"freq2\" ~/testcases/*.log";
        List<String> results = client.doQuery(query); 
        int lineCount = 0;
        for(String result: results)
            lineCount += Integer.parseInt(result.replaceAll("[\n\r]", ""));
         assertEquals(freqAnsPerFile * numSome, lineCount);
    }

   @Test
    public void freqToAll() {
        Client client = new Client(hosts);
        String query = "grep -rc \"freq\" ~/testcases/*.log";
        List<String> results = client.doQuery(query); 
        int lineCount = 0;
        for(String result: results)
            lineCount += Integer.parseInt(result.replaceAll("[\n\r]", ""));
         assertEquals(freqAnsPerFile * numAll, lineCount);
    }
}
